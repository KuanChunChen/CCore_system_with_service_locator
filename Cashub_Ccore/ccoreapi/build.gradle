apply plugin: 'com.android.library'
apply from: "properties.gradle"


def APIName = 'cashub-ccore-API'
def verName = '1.0.0'
def extension = 'jar'

android {

    compileSdkVersion rootProject.ext.android['compileSdkVersion']
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 1
        versionName verName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        buildTypes.each{
            project.ext.initEnvirnoment()
            it.buildConfigField 'String', 'vendorName', "\"" + gradle.ext.vendorName + "\""
            it.buildConfigField 'String', 'packageImpl', "\"" + gradle.ext.packageImpl + "\""
            it.buildConfigField 'String', 'printImpl', "\"" + gradle.ext.printImpl + "\""
            it.buildConfigField 'String', 'deviceImpl', "\"" + gradle.ext.deviceImpl + "\""
            it.buildConfigField 'String', 'moduleImpl', "\"" + gradle.ext.moduleImpl + "\""
            it.buildConfigField 'String', 'networkImpl', "\"" + gradle.ext.networkImpl + "\""
            it.buildConfigField 'String', 'paymentConfigImpl', "\"" + gradle.ext.paymentConfigImpl + "\""
            it.buildConfigField 'String', 'scannerImpl', "\"" + gradle.ext.scannerImpl + "\""
            it.buildConfigField 'String', 'systemImpl', "\"" + gradle.ext.systemImpl + "\""
        }

    }

}



dependencies {
    implementation files('libs/cashub-ccore-interface-1.0.0.jar')
    implementation files('libs/custom-impl-1.0.1.jar')
}


task makeCCoreAPIr(type: Jar,dependsOn: ['buildClean']){

    /** Name define */
    baseName = APIName
    version = verName
    extension = extension

    from('build/intermediates/javac/debug/classes')
    from fileTree(dir: 'src/main', includes: ['assets/**'])
    destinationDir = file('build/outputs')

}

task buildClean(type: Delete) {
    delete 'build/outputs/'
}

